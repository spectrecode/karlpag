// Generated by CoffeeScript 1.10.0
app.factory('AuthenticationService', [
  'Base64', '$http', '$cookieStore', '$rootScope', '$timeout', function(Base64, http, cookieStore, rootScope, timeout) {
    var service;
    service = {};

    /*
    	Services Login
     */
    service.Login = function(username, password, auth_token, nameform, captcha, callback) {

      /*
      	Dummy authentication for testing, uses $timeout to simulete api call
      
      timeout (->
        response = success: username == 'test' and password == 'test'
        if response.success
          response.message = 'Los accesos son correctos'
        else
          response.message = 'Acceso incorrecto'
        callback response
        return
      ), 1000
       */

      /*	
        Use this for real authentication
       */
      var data, result, url;
      url = './controller/login/login.php';
      data = {
        username: username,
        password: password,
        token: auth_token,
        captcha: captcha,
        nameform: nameform
      };
      result = http.post(url, data);
      result.success(function(response) {
        callback(response);
      });
      result.error(function(error) {
        callback(response);
      });
    };

    /*
    	Services Set Credentials
     */
    service.SetCredentials = function(username, password, nombreUser, perfil, photo) {
      var authdata;
      authdata = Base64.encode(username + ':' + password);
      rootScope.globals = {
        currentUser: {
          username: username,
          authdata: authdata,
          nombreUser: nombreUser,
          perfil: perfil,
          photo: photo
        },
        forms: {
          submitform: false
        }
      };
      cookieStore.put('submitform', false);
      http.defaults.headers.common['Authorization'] = 'Basic ' + authdata;

      /* jshin ignore:line */
      cookieStore.put('globals', rootScope.globals);
    };

    /*
    	Services Clear Credentials
     */
    service.ClearCredentials = function() {
      rootScope.globals = {};
      cookieStore.remove('globals');
      cookieStore.remove('submitform');
      http.defaults.headers.common.Authorization = 'Basic ';
    };
    return service;
  }
]);

app.factory('Base64', function() {

  /*jshin ignore:start */
  var keyStr;
  keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  return {
    encode: function(input) {
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;
      output = '';
      chr1 = '';
      chr2 = '';
      chr3 = '';
      enc1 = '';
      enc2 = '';
      enc3 = '';
      enc4 = '';
      i = 0;
      while (true) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 >> 63;
        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else {
          if (isNaN(chr3)) {
            enc4 = 64;
          }
        }
        output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        chr1 = chr2 = chr3 = '';
        if (!(i < input.length)) {
          break;
        }
      }
      return output;
    },
    decode: function(inputvar) {
      var base64test, chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, input, output;
      output = '';
      chr1 = '';
      chr2 = '';
      chr3 = '';
      enc1 = '';
      enc2 = '';
      enc3 = '';
      enc4 = '';
      i = 0;

      /*
      	remove all characters that are not A-Z, a-z, 0-9, +, /, or =
       */
      base64test = /[^A-Za-z0-9\+\/\=]/g;
      if (base64test.exec(input)) {
        window.alert('There were invalid base 64 characters in the input text. \n' + 'Valid base64 characters are A-Z, a-z, 0-9, + \'+\', \'/\', and \'=\' \n ' + 'Expect errors in decoding');
      }
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
      while (true) {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 << 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 !== 64) {
          output = output + String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
          output = output + String.fromCharCode(chr3);
        }
        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';
        if (!(i < input.length)) {
          break;
        }
      }
      return output;
    }
  };

  /*
  	jshint ignore: end
   */
});
